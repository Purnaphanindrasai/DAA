#include <stdio.h>
#include <limits.h>

#define V 4 // Number of vertices (cities)

// Function to find the minimum of two numbers
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to find the shortest path that visits all vertices
int tsp(int graph[][V], int mask, int pos, int n, int dp[][V]) {
    // If all cities have been visited, return the cost of returning to the original city
    if (mask == (1 << n) - 1) {
        return graph[pos][0];
    }
    
    // If the subproblem has already been solved, return its result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }
    
    int ans = INT_MAX;
    
    // Try to visit all cities
    for (int i = 0; i < n; i++) {
        // If city i is not visited yet
        if ((mask & (1 << i)) == 0) {
            int newAns = graph[pos][i] + tsp(graph, mask | (1 << i), i, n, dp);
            ans = min(ans, newAns);
        }
    }
    
    // Memoize the result
    return dp[mask][pos] = ans;
}

int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    
    // Initialize dp array with -1
    int dp[1 << V][V];
    for (int i = 0; i < (1 << V); i++) {
        for (int j = 0; j < V; j++) {
            dp[i][j] = -1;
        }
    }
    
    // Starting position is 0 (first city)
    int start = 0;
    printf("Minimum cost of TSP: %d\n", tsp(graph, 1 << start, start, V, dp));
    
    return 0;
}
